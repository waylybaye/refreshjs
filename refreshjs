#!/usr/bin/env node

var http = require('http')
var path = require('path')
var fs   = require('fs');
var url  = require('url');
var events = require('events');
var util = require('util');

var USAGE = "USAGE: refreshjs --watch /dir1 /dir2 --port 1117";
var VERSION = "0.1a"

function parseOpts(switches){
  // Parse options from command line argv
  var opts = {};
  var _switch;

  var _switches = {};

  for( var variable in switches ){
    if( switches.hasOwnProperty(variable) ){
      var variable_switches = switches[variable];
      variable_switches.forEach(function(val){
        _switches[val] = variable;
      })
    }
  }

  process.argv.forEach(function(val, index, array){
    if( _switches[val] !== undefined ){
      _switch = val;
      opts[_switches[_switch]] = [];
      return;
    }

    if( _switch ){
      var variable = _switches[_switch];
      opts[variable].push(val);
    }
  });
  return opts;
}

// The eventer class
Eventer = function(){
  events.EventEmitter.call(this);
}
util.inherits(Eventer, events.EventEmitter);


// Parse the options
var opts = parseOpts({
  'watch': ['--watch', '-w'],
  'port': ['--port', '-p'],
  'version': ['--version', '-v'],
  'help': ['--help', '-h']
});

if( opts.version ){
  console.log("VERSION ", VERSION);
  process.exit(0);
}

if( opts.help ){
  console.log(USAGE);
  process.exit(0);
}

var port = opts.port ? opts.port[0] : 1117
var watched_dirs = opts.watch ? opts.watch : ['.']
var eventer = new Eventer();

watched_dirs.forEach(function(dir){
  // convert '.' '../' to real path
  try{
    dir  = fs.realpathSync(dir);
  }catch(e){
    console.error(e.message);
    process.exit(1);
  }

  // watch dirs and emit 'refresh' when watched dir changed
  function refresh(event, filename){
    eventer.emit('refresh');
  }

  fs.watch(dir, refresh)
  console.log('Watching ', dir)
})


// Start the http server which serve the refresh.js file
// and long polling server

http.createServer(function(request, response){

  var pathname = url.parse(request.url).pathname;
  console.log('request', pathname)

  // return refresh.js file
  if( pathname === '/refresh.js' ){

    fs.readFile('refresh.js', function(err, data){

      // ----- oh, no
      if (err) throw err;

      // parse the {{ port }} variable
      data = data.toString().replace(/\{\{\s*port\s*\}\}/g, port);

      response.writeHead(200, {'Content-Type': 'text/javascript'});
      response.write(data);
      response.end();
    });
  }


  // Long polling view, call through jsonp
  // only return when watched dir changed

  if( pathname === '/poll' ){
    var callback = url.parse(request.url, true).query.callback;
    eventer.once('refresh', function(){
      response.writeHead(200, {'Content-Type': 'text/javascript'});
      var json = JSON.stringify({changed: true})
      response.write(callback + "(" + json + ")");
      response.end();
    });
  }

}).listen(port);

console.log('Server is running on port ' + port + ' ...')
