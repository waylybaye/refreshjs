#!/usr/bin/env node

var http = require('http')
var path = require('path')
var fs   = require('fs');
var url  = require('url');
var events = require('events');
var util = require('util');


// TODO: using optparse to parse params
var dir  = path.dirname(fs.realpathSync(__filename))
var port = 1127

// The eventer class
Eventer = function(){
  events.EventEmitter.call(this);
}
util.inherits(Eventer, events.EventEmitter);

var eventer = new Eventer();


// watch dirs and emit 'refresh' when watched dir changed
function refresh(event, filename){
  eventer.emit('refresh');
}
fs.watch(dir, refresh)


// Start the http server which serve the refresh.js file
// and long polling server

http.createServer(function(request, response){

  var pathname = url.parse(request.url).pathname;

  // return refresh.js file

  if( pathname === '/refresh.js' ){

    fs.readFile('refresh.js', function(err, data){

      // ----- oh, no
      if (err) throw err;

      // parse the {{ port }} variable
      data = data.toString().replace(/\{\{\s*port\s*\}\}/g, port);

      response.writeHead(200, {'Content-Type': 'text/javascript'});
      response.write(data);
      response.end();
    });
  }


  // Long polling view, call through jsonp
  // only return when watched dir changed

  if( pathname === '/poll' ){
    var callback = url.parse(request.url, true).query.callback;
    eventer.once('refresh', function(){
      response.writeHead(200, {'Content-Type': 'text/javascript'});
      var json = JSON.stringify({changed: true})
      response.write(callback + "(" + json + ")");
      response.end();
    });
  }

}).listen(port);

console.log('Server is running ...')