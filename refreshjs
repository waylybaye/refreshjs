#!/usr/bin/env node

var http   = require('http');
var path   = require('path');
var fs     = require('fs');
var url    = require('url');
var events = require('events');
var util   = require('util');

var USAGE = "USAGE: refreshjs --watch /dir1 /dir2 --port 1117";
var VERSION = "0.1a";

var red, blue, reset;
red   = '\033[31m';
blue  = '\033[34m';
reset = '\033[0m';

function parseOpts(switches){
  // Parse options from command line argv
  var opts = {};
  var _switch;

  var _switches = {};

  for( var variable in switches ){
    if( switches.hasOwnProperty(variable) ){
      var variable_switches = switches[variable];
      variable_switches.forEach(function(val){
        _switches[val] = variable;
      });
    }
  }

  process.argv.forEach(function(val, index, array){
    if( _switches[val] !== undefined ){
      _switch = val;
      opts[_switches[_switch]] = [];
      return;
    }

    if( _switch ){
      var variable = _switches[_switch];
      opts[variable].push(val);
    }
  });
  return opts;
}

// The eventer class
Eventer = function(){
  events.EventEmitter.call(this);
};
util.inherits(Eventer, events.EventEmitter);


// Parse the options
var opts = parseOpts({
  'watch'  : ['--watch', '-w'],
  'port'   : ['--port', '-p'],
  'version': ['--version', '-v'],
  'help'   : ['--help', '-h']
});

if( opts.version ){
  console.log("VERSION ", VERSION);
  process.exit(0);
}

if( opts.help ){
  console.log(USAGE);
  process.exit(0);
}

var port = opts.port ? opts.port[0] : 1117;
var watched_dirs = opts.watch ? opts.watch : ['.'];
var eventer = new Eventer();
var watched_files = [];

hidden = function(file) {
  return /^\.|~$/.test(file);
};

watch = function(file_path, emit_refresh){
  try{
    file_path  = fs.realpathSync(file_path);
  }catch(e){
    console.error(e.message);
    process.exit(1);
  }
  if( hidden(file_path) ){
    return;
  }

  fs.stat(file_path, function(err, stats){
    if( stats.isDirectory() ){
      fs.readdir(file_path, function(err, files){
        files.forEach(function(file){
          watch(path.join(file_path, file));
        });
      });

      fs.watch(file_path, function(event, filename){
        /// looking for new files
        watch(file_path, true);
      });

    }else{
      if( watched_files.indexOf(file_path) === -1 ){
        fs.watchFile(file_path, function(){
          eventer.emit('refresh');
        });
        watched_files.push(file_path);
        if( emit_refresh ){
          eventer.emit('refresh');
        }
      }
    }
  });
};

watched_dirs.forEach(function(dir){
  watch(dir);
  console.log(blue + 'Watching ', fs.realpathSync(dir) + reset);
});

eventer.on('refresh', function(){console.log('refresh');});

// Start the http server which serve the refresh.js file
// and long polling server

http.createServer(function(request, response){
  var pathname = url.parse(request.url).pathname;

  // return refresh.js file
  if( pathname === '/refresh.js' ){
    var dirname = path.dirname(__filename);
    var file_path = fs.realpathSync(path.join(dirname, 'refresh.js'));

    fs.readFile(file_path, function(err, data){
      // ----- oh, no
      if (err) throw err;

      // parse the {{ port }} variable
      data = data.toString().replace(/\{\{\s*port\s*\}\}/g, port);

      response.writeHead(200, {'Content-Type': 'text/javascript'});
      response.write(data);
      response.end();
    });
  }


  // Long polling view, call through jsonp
  // only return when watched dir changed

  if( pathname === '/poll' ){
    var callback = url.parse(request.url, true).query.callback;
    eventer.once('refresh', function(){
      response.writeHead(200, {'Content-Type': 'text/javascript'});
      var json = JSON.stringify({changed: true});
      response.write(callback + "(" + json + ")");
      response.end();
    });
  }

}).listen(port);

console.log('add below code to your html file');
console.log(red + "<script src='//localhost:" + port + "/refresh.js'></script>" + reset);
